use super::Arity;
use super::frontend::CorePrimitive;

impl CorePrimitive {
    pub(super) const fn returns(self) -> Arity {
        use Arity::*;
        use CorePrimitive::*;
        match self {
            Zero_ => Exact(1),
            Eqv_ => Exact(1),
            Eq_ => Exact(1),
            Equal_ => Exact(1),
            IsNumber_ => Exact(1),
            Exact_ => Exact(1),
            Inexact_ => Exact(1),
            Numequal => Exact(1),
            NumLt => Exact(1),
            Even_ => Exact(1),
            Sum => Exact(1),
            Product => Exact(1),
            Difference => Exact(1),
            Quotient => Exact(1),
            FloorDivide => Exact(2),
            TruncateDivide => Exact(2),
            Floor => Exact(1),
            Ceiling => Exact(1),
            Truncate => Exact(1),
            Round => Exact(1),
            Exp => Exact(1),
            Log => Exact(1),
            Sine => Exact(1),
            Cosine => Exact(1),
            Tangent => Exact(1),
            Arcsine => Exact(1),
            Arccosine => Exact(1),
            Arctangent => Exact(1),
            SquareRoot => Exact(1),
            ExactSquareRoot => Exact(2),
            Exponent => Exact(1),
            ToFloat => Exact(1),
            ToInt => Exact(1),
            Not => Exact(1),
            IsBoolean_ => Exact(1),
            BooleanEq_ => Exact(1),
            IsPair_ => Exact(1),
            Cons => Exact(1),
            Car => Exact(1),
            Cdr => Exact(1),
            SetCar => Exact(1),
            SetCdr => Exact(1),
            IsNull_ => Exact(1),
            IsList_ => Exact(1),
            MakeList => Exact(1),
            List => Exact(1),
            Length => Exact(1),
            Append => Exact(1),
            IsSymbol_ => Exact(1),
            SymbolEq_ => Exact(1),
            SymbolToString => Exact(1),
            StringToSymbol => Exact(1),
            IsChar_ => Exact(1),
            CharEq_ => Exact(1),
            CharLt_ => Exact(1),
            CharToInt => Exact(1),
            IntToChar => Exact(1),
            IsString_ => Exact(1),
            MakeString => Exact(1),
            String => Exact(1),
            StringLength => Exact(1),
            StringRef => Exact(1),
            StringSet => Exact(0),
            StringEq_ => Exact(1),
            StringLt_ => Exact(1),
            Substring => Exact(1),
            StringAppend => Exact(1),
            StringToList => Exact(1),
            ListToString => Exact(1),
            StringCopy => Exact(1),
            StringCopy_ => Exact(0),
            StringFill_ => Exact(0),
            IsVector_ => Exact(1),
            MakeVector => Exact(1),
            Vector => Exact(1),
            VectorLength => Exact(1),
            VectorRef => Exact(1),
            VectorSet => Exact(0),
            VectorToList => Exact(1),
            ListToVector => Exact(1),
            VectorCopy => Exact(1),
            VectorCopy_ => Exact(0),
            VectorAppend => Exact(1),
            VectorFill_ => Exact(0),
            IsBytevector_ => Exact(1),
            MakeBytevector => Exact(1),
            Bytevector => Exact(1),
            BytevectorLength => Exact(1),
            BytevectorU8Ref => Exact(1),
            BytevectorU8Set_ => Exact(0),
            BytevectorCopy => Exact(1),
            BytevectorCopy_ => Exact(0),
            BytevectorAppend => Exact(1),
            IsProcedure_ => Exact(1),
            Apply => Unknown,
            CallWithCurrentContinuation => Unknown,
            Values => Unknown,
            CallWithValues => Unknown,
            DynamicWind => Unknown,
            WithExceptionHandler => Unknown,
            Raise => Exact(0),
            RaiseContinuable => Unknown,
            NewEvalEnvironment => Exact(1),
            Eval => Unknown,
            StartInternalSentinel => Unknown,
            Malloc => Exact(1),
            StoreDynamicExtent => Exact(1),
            RewindDynamicExtent => Exact(0),
            PushDynamicFrame => Exact(1),
            PushExceptionFrame => Exact(1),
            PushParameterFrame => Exact(1),
            FindExceptionHandler => Exact(2),
        }
    }

    pub(super) const fn variants(self) -> &'static [Arity] {
        use Arity::*;
        use CorePrimitive::*;
        match self {
            Zero_ => &[Exact(1)],
            Eqv_ => &[],
            Eq_ => &[],
            Equal_ => &[],
            IsNumber_ => &[],
            Exact_ => &[],
            Inexact_ => &[],
            Numequal => &[AtLeast(2)],
            NumLt => &[],
            Even_ => &[],
            Sum => &[AtLeast(0)],
            Product => &[AtLeast(0)],
            Difference => &[AtLeast(1)],
            Quotient => &[AtLeast(1)],
            FloorDivide => &[],
            TruncateDivide => &[],
            Floor => &[],
            Ceiling => &[],
            Truncate => &[],
            Round => &[],
            Exp => &[],
            Log => &[],
            Sine => &[],
            Cosine => &[],
            Tangent => &[],
            Arcsine => &[],
            Arccosine => &[],
            Arctangent => &[],
            SquareRoot => &[],
            ExactSquareRoot => &[],
            Exponent => &[],
            ToFloat => &[],
            ToInt => &[],
            Not => &[],
            IsBoolean_ => &[],
            BooleanEq_ => &[],
            IsPair_ => &[],
            Cons => &[Exact(2)],
            Car => &[],
            Cdr => &[],
            SetCar => &[],
            SetCdr => &[],
            IsNull_ => &[],
            IsList_ => &[],
            MakeList => &[],
            List => &[AtLeast(0)],
            Length => &[],
            Append => &[AtLeast(0)],
            IsSymbol_ => &[],
            SymbolEq_ => &[],
            SymbolToString => &[],
            StringToSymbol => &[],
            IsChar_ => &[],
            CharEq_ => &[],
            CharLt_ => &[],
            CharToInt => &[],
            IntToChar => &[],
            IsString_ => &[],
            MakeString => &[],
            String => &[],
            StringLength => &[],
            StringRef => &[],
            StringSet => &[],
            StringEq_ => &[],
            StringLt_ => &[],
            Substring => &[],
            StringAppend => &[],
            StringToList => &[],
            ListToString => &[],
            StringCopy => &[],
            StringCopy_ => &[],
            StringFill_ => &[],
            IsVector_ => &[],
            MakeVector => &[],
            Vector => &[],
            VectorLength => &[],
            VectorRef => &[],
            VectorSet => &[],
            VectorToList => &[],
            ListToVector => &[],
            VectorCopy => &[],
            VectorCopy_ => &[],
            VectorAppend => &[],
            VectorFill_ => &[],
            IsBytevector_ => &[],
            MakeBytevector => &[],
            Bytevector => &[],
            BytevectorLength => &[],
            BytevectorU8Ref => &[],
            BytevectorU8Set_ => &[],
            BytevectorCopy => &[],
            BytevectorCopy_ => &[],
            BytevectorAppend => &[],
            IsProcedure_ => &[],
            Apply => &[AtLeast(2)],
            CallWithCurrentContinuation => &[Exact(1)],
            Values => &[AtLeast(0)],
            CallWithValues => &[Exact(2)],
            DynamicWind => &[Exact(3)],
            WithExceptionHandler => &[Exact(2)],
            Raise => &[Exact(1)],
            RaiseContinuable => &[Exact(1)],
            NewEvalEnvironment => &[],
            Eval => &[],
            StartInternalSentinel => &[],
            Malloc => &[Exact(2)],
            StoreDynamicExtent => &[Exact(0)],
            RewindDynamicExtent => &[Exact(1)],
            PushDynamicFrame => &[Exact(2)],
            PushExceptionFrame => &[Exact(1)],
            PushParameterFrame => &[Exact(2)],
            FindExceptionHandler => &[Exact(0)],
        }
    }
}
